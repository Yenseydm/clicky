{"version":3,"sources":["components/navbar.js","components/jumbotron.js","components/card.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Jumbotron","class","Card","props","src","image","alt","name","id","score","topScore","message","App","state","images","cardClick","clickedImg","filter","match","clicked","i","length","setState","sort","a","b","Math","random","this","map","onClick","key","handleClick","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"w+DAWeA,MARf,WACE,OACE,yBAAKC,UAAU,iDACd,8CCMUC,G,MATG,kBAClB,yBAAKC,MAAM,aACT,wBAAIA,MAAM,aAAV,yCACA,wBAAIA,MAAM,SACV,uBAAGA,MAAM,QAAT,4EACA,uBAAGA,MAAM,SAAT,+B,OCSaC,G,MAdF,SAAAC,GAAK,OAEd,6BACE,yBAAKJ,UAAU,aACX,yBAAKA,UAAU,eACbK,IAAKD,EAAME,MACXC,IAAKH,EAAMI,KACXC,GAAIL,EAAMK,SCFlBC,G,MAAQ,GACRC,EAAW,EACXC,EAAU,4BAqHCC,E,4MAhHbC,MAAO,CACLC,SACAH,UACAF,QACAC,Y,EAGFK,UAAY,SAAAP,GAER,IAAMQ,EAAaF,EAAOG,QAAO,SAAAC,GAAK,OAAIA,EAAMV,KAAOA,KAEvD,GAAIQ,EAAW,GAAGG,QAAQ,CAEtBV,EAAQ,EACRE,EAAU,qCAEV,IAAK,IAAIS,EAAI,EAAGA,EAAIN,EAAOO,OAASD,IAClCN,EAAOM,GAAGD,SAAU,EAGtB,EAAKG,SAAS,CAACX,YACf,EAAKW,SAAS,CAACb,UACf,EAAKa,SAAS,CAACR,gBAEV,GAAIL,EAAQ,GAEjBO,EAAW,GAAGG,SAAU,EACxBV,IACAE,EAAU,0BAEPF,EAAQC,IACTA,EAAWD,EACX,EAAKa,SAAS,CAAEZ,cAGlBI,EAAOS,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YAE7C,EAAKL,SAAS,CAAER,WAChB,EAAKQ,SAAS,CAAEb,UAChB,EAAKa,SAAS,CAAEX,gBAEX,CAELK,EAAW,GAAGG,SAAU,EAExBV,EAAQ,EACRE,EAAU,6CACVD,EAAW,GACX,EAAKY,SAAS,CAAEZ,aAEhB,IAAI,IAAIU,EAAI,EAAGA,EAAGN,EAAOO,OAAQD,IAC7BN,EAAOM,GAAGD,SAAU,EAGxBL,EAAOS,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAKC,KAAKC,YAE5C,EAAKL,SAAS,CAAER,WAChB,EAAKQ,SAAS,CAAEb,UAChB,EAAKa,SAAS,CAAEX,c,uDAMd,IAAD,OAEP,OACE,6BACC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACD,yBAAKZ,UAAU,aACX,yBAAKE,MAAM,OACR2B,KAAKf,MAAMC,OAAOe,KAAI,SAAAxB,GAAK,OAC9B,yBAAKyB,QAAS,kBAAM,EAAKf,UAAUV,EAAMG,KAAKT,UAAU,kBACpD,kBAAC,EAAD,CACEgC,IAAK1B,EAAMG,GACXA,GAAIH,EAAMG,GACVD,KAAMF,EAAME,KACZY,QAASd,EAAMc,QACfd,MAAOA,EAAMA,MACb2B,YAAa,EAAKA,oBAO5B,yBAAK/B,MAAM,6CACT,uBAAGA,MAAM,SAAT,WAA0B2B,KAAKf,MAAMJ,MAArC,iBAA0DmB,KAAKf,MAAMH,UACnE,2BAAIkB,KAAKf,MAAMF,e,GA3FPsB,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMvC,c","file":"static/js/main.89fb5b56.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./navbar.css\";\n\nfunction Navbar() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n     <p> Clicky Game </p>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport \"./jumbotron.css\";\n\nconst Jumbotron = () => (\n<div class=\"jumbotron\">\n  <h1 class=\"display-4\">Clicky Game: 90 Day Fianc√© Edition</h1>\n  <hr class=\"my-4\"/>\n  <p class=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n  <p class=\"begin\">Click an image to begin!</p>\n  </div>\n);\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./card.css\";\n\nconst Card = props => (\n \n    <div >\n      <div className=\"card-body\">\n          <img className=\"card-img-top\" \n            src={props.image} \n            alt={props.name} \n            id={props.id}\n          />\n       </div>\n    </div>\n\n  );\n\nexport default Card;","import React, {Component} from 'react';\nimport Navbar from \"./components/navbar\";\nimport Jumbotron from \"./components/jumbotron\";\nimport images from \"./cardimage.json\";\nimport Card from \"./components/card\";\nimport \"./App.css\";\n// import Score from \"./components/Score\";\n\nlet score = 0;\nlet topScore = 0;\nlet message = \"Click Any Image to begin!\";\n\n\nclass App extends Component {\n \n  state ={\n    images,\n    message,\n    score,\n    topScore\n  };\n\n  cardClick = id => {\n  \n      const clickedImg = images.filter(match => match.id === id);\n      \n      if (clickedImg[0].clicked){\n\n          score = 0;\n          message = \"OOooO Better luck next time buddy!\";\n\n          for (let i = 0; i < images.length ; i++){\n            images[i].clicked = false;\n          }\n\n          this.setState({message});\n          this.setState({score});\n          this.setState({images});\n\n        } else if (score < 11){\n\n          clickedImg[0].clicked = true;\n          score++;\n          message = \"Great job! Keep Going!!\"\n\n          if(score > topScore){\n            topScore = score;\n            this.setState({ topScore });\n          }\n\n          images.sort(function(a, b){return 0.5 - Math.random()});\n\n          this.setState({ images });\n          this.setState({ score });\n          this.setState({ message });\n\n        } else {\n\n          clickedImg[0].clicked = true;\n\n          score = 0;\n          message = \"Congrats! You got a memory of an elephant!\";\n          topScore = 12;\n          this.setState({ topScore });\n\n          for(let i = 0; i< images.length; i ++){\n              images[i].clicked = false;\n          }\n\n          images.sort(function(a, b){return 0.5 -Math.random()});\n\n          this.setState({ images });\n          this.setState({ score });\n          this.setState({ message });\n\n        }\n  \n  };\n\n  render() {\n\n    return (\n      <div>\n       <Navbar />\n       <Jumbotron /> \n      <div className=\"container\">\n          <div class=\"row\">\n            {this.state.images.map(image => (\n          <div onClick={() => this.cardClick(image.id)} className=\"card col-md-3 \">\n              <Card\n                key={image.id}\n                id={image.id}\n                name={image.name}\n                clicked={image.clicked}\n                image={image.image}\n                handleClick={this.handleClick}\n                />\n          </div>\n            ))}\n          </div>\n      </div>\n\n      <nav class=\"navbar fixed-bottom navbar-light bg-light\">\n        <p class=\"score\"> Score: {this.state.score} | Top Score: {this.state.topScore}</p>\n          <p>{this.state.message}</p>\n      </nav>\n\n      </div>\n     \n\n       \n    );\n\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//         <Navbar />\n//         <Jumbotron />\n//         <br></br>\n//         <Score />\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/ \n    ) \n\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}